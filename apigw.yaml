trigger:
  - main

pool:
  name: Default  # Make sure this is the correct name of your self-hosted agent pool

variables:
  storageAccountName: 'stacc$(Build.BuildId)'
  fileShareName: 'myfileshare'
  localFilePath: 'C:\Users\mavishnoi\Downloads\license.lic'
  resourceGroup: 'RG-mavishnoi'
  containerAppName: 'mycontainerapp'
  existingContainerAppEnvironmentName: 'managedEnvironment-RGmavishnoi-91ac-21march'
  location: 'northeurope'  
  dockerImage: 'manishvishnoi/gw22march:latest'
  azureSubscription: 'axwaymanishdepops1'  

stages:

  - stage: CreateStorageAccount
    displayName: Create Storage Account
    jobs:
      - job: CreateStorageAccount
        steps:
          - task: AzureCLI@2
            displayName: 'Create Storage Account'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                az storage account create --name $(storageAccountName) --resource-group $(resourceGroup) --location $(location) --sku Standard_LRS --kind StorageV2

  - stage: CreateFileShare
    displayName: Create File Share
    jobs:
      - job: CreateFileShare
        steps:
          - task: AzureCLI@2
            displayName: 'Create File Share'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                # Get storage account key
                $storageKey = az storage account keys list --resource-group $(resourceGroup) --account-name $(storageAccountName) --query '[0].value' -o tsv
                echo "##vso[task.setvariable variable=STORAGE_KEY;isOutput=true]$storageKey"

                # Create the file share if it doesn't exist
                $shareExists = az storage share exists --account-name $(storageAccountName) --account-key $storageKey --name $(fileShareName) --query 'exists' -o tsv
                if ($shareExists -eq 'false') {
                    az storage share create --account-name $(storageAccountName) --account-key $storageKey --name $(fileShareName)
                    Write-Host "File share $(fileShareName) created."
                } else {
                    Write-Host "File share $(fileShareName) already exists."
                }

  - stage: UploadFile
    displayName: Upload File to Azure File Share
    dependsOn: CreateFileShare
    jobs:
      - job: UploadFile
        variables:
          STORAGE_KEY: $[ stageDependencies.CreateFileShare.CreateFileShare.outputs['STORAGE_KEY'] ]
        steps:
          - script: |
              echo "STORAGE_KEY Value in UploadFile: $(STORAGE_KEY)"
            displayName: "Check STORAGE_KEY Value"

          - task: AzureCLI@2
            displayName: 'Upload File to Azure File Share'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                az storage file upload --account-name $(storageAccountName) --account-key $(STORAGE_KEY) --share-name $(fileShareName) --source "$(localFilePath)"

  - stage: Deploy
    displayName: Deploy Azure Resources
    dependsOn: UploadFile
    jobs:
      - job: DeployResources
        displayName: Deploy Bicep Template
        steps:
          - task: AzureCLI@2
            displayName: 'Deploy Bicep Template'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                az deployment group create --resource-group $(resourceGroup) --template-file ./apigw.bicep --parameters storageAccountName=$(storageAccountName) containerAppName=$(containerAppName) dockerImage=$(dockerImage) existingContainerAppEnvironmentName=$(existingContainerAppEnvironmentName) location=$(location)

  - stage: MountFileShare
    displayName: Mount File Share with Container App
    dependsOn: UploadFile  # Ensuring file is uploaded before mounting
    variables:
      STORAGE_KEY: $[ stageDependencies.CreateFileShare.CreateFileShare.outputs['STORAGE_KEY'] ]
    jobs:
      - job: MountFileShare
        displayName: Mount File Share
        steps:
          - script: |
              echo "STORAGE_KEY Value in MountFileShare: $(STORAGE_KEY)"
            displayName: "Check STORAGE_KEY Value"

          - task: AzureCLI@2
            displayName: 'Update Container App to Mount File Share'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                az containerapp update --name $(containerAppName) --resource-group $(resourceGroup) --environment $(existingContainerAppEnvironmentName) --secrets storage-account-key=$(STORAGE_KEY) --volume-mounts name=$(fileShareName) mount-path="/mnt/$(fileShareName)" --storage-account $(storageAccountName) --share-name $(fileShareName)
